generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("SUPABASE_POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// schema.prisma

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  accounts Account[]
  sessions Session[]
  notes    Notes[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Notes {
  id       Int     @id @default(autoincrement())
  title    String
  content  String
  author   User?   @relation(fields: [authorId], references: [id])
  authorId String?

  @@unique([title, authorId])
}

model Message {
  index    Int
  authorId String
  role     String
  content  String
  title    String

  @@unique([index, authorId, title])
}

model Upload {
  index    Int    @id @default(autoincrement())
  authorId String
  title    String
  content  String

  @@unique([title, authorId])
}

model Card {
  index Int @id @default(autoincrement())

  title    String
  authorId String
  term     String
  answer   String

  flashcard Flashcard @relation(fields: [title, authorId], references: [title, authorId], onDelete: Cascade)

  @@unique([term, answer, title])
}

model Flashcard {
  index          Int    @id @default(autoincrement())
  authorId       String
  title          String
  description    String
  rating         Int
  practiceCount  Int?
  last_practiced String

  cards Card[]

  @@unique([title, authorId])
}
