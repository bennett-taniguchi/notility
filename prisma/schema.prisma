generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("SUPABASE_POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("SUPABASE_POSTGRES_URL_NON_POOLING") // uses a direct connection
}

// schema.prisma

model Account {
  id                 String  @id @default(cuid())
  userId             String  @map("user_id")
  type               String
  provider           String
  providerAccountId  String  @map("provider_account_id")
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String?   @unique
  emailVerified   DateTime?
  image           String?
  notespace_theme String?
  creation_theme  String?
  tracks_theme    String?
  premium_start   String?
  premium_end     String?
  accounts        Account[]
  sessions        Session[]
  notes           Notes[]
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Notes {
  id          Int     @id @default(autoincrement())
  title       String
  content     String
  author      User?   @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId    String?
  uri         String
  createdBy   String
  prompt_type String?
  prompt      String?
  createdOn String
  sources   Int
  notespace Notespace? @relation(fields: [uri], references: [uri], onDelete: Cascade)

  @@unique([title,uri], name:"title_uri")
}
 
 
 
model Message {
  index       Int    @id @default(autoincrement())
  authorId String
  role     String
  content  String
  title    String
  uri      String

  match    String?
  matchScore String?

  notespace Notespace? @relation(fields: [uri], references: [uri], onDelete: Cascade)

  @@unique([index, uri])
}

model Shared {
  authorId String
  uri      String
  level    Int

  notespace Notespace @relation(fields: [uri], references: [uri], onDelete: Cascade)

  @@unique([uri, authorId])
}

model Notespace {
  id         Int    @id @default(autoincrement())
  authorId   String
  created_on String
  uri        String
  title      String
  owner      String

  notes Notes[]

  sources_count Int?
  sources_blurb String?
  shared        Shared[]
  messages      Message[]
 
  permissions Permissions[]
  uploads Upload[]
  //quizzes Quiz[]

  @@unique([uri])
 
}

// shared id is new users authorId
// [0,1] -> read,write
model Permissions{
  id         Int    @id @default(autoincrement())
  notespace      Notespace?   @relation(fields: [uri], references: [uri], onDelete: Cascade)
  uri         String
  authorId    String
  email    String
  level       Int

  @@unique([uri,email])
}

model Upload {
  id  Int    @id @default(autoincrement())
  uri String
 

 
  originalFileName String
  title         String
  owner         String
  filetype      String
  summary       String?

  notespace Notespace @relation(fields: [uri], references:[uri],onDelete:Cascade)
  @@unique([uri,title,originalFileName])
}


model Quiz {
  id  Int    @id @default(autoincrement())
  uri String
  //questions Question[]
 
  //notespace Notespace @relation(fields: [uri], references:[uri],onDelete:Cascade)

  @@unique([uri])
}

model Question {
  id  Int    @id @default(autoincrement())
  uri String
  question String
  a String
  b String
  c String
  d String
  hint String
  e String?
  f String?
  correctOption String
  @@unique([uri,a,b,c,d])
  //quiz Quiz @relation(fields: [uri],references:[uri],onDelete: Cascade)
}